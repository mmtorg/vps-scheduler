name: ConoHa VPS - Stop (00:50 MMT)

on:
    schedule:
        - cron: "20 18 * * *" # 00:50 MMT
    workflow_dispatch: {}

jobs:
    stop:
        runs-on: ubuntu-latest
        env:
            ID_ENDPOINT: ${{ secrets.CONOHA_IDENTITY_ENDPOINT }}/v2.0/tokens
            COMPUTE_BASE: ${{ secrets.CONOHA_COMPUTE_ENDPOINT }}/${{ secrets.CONOHA_TENANT_ID }}
            TENANT_ID: ${{ secrets.CONOHA_TENANT_ID }}
            SERVER_ID: ${{ secrets.CONOHA_SERVER_ID }}
        steps:
            - name: Install jq
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Get ConoHa Token (v3)
              id: auth
              env:
                  ID_V3: ${{ secrets.CONOHA_IDENTITY_ENDPOINT }}/auth/tokens # 例: https://identity.c3j1.conoha.io/v3/auth/tokens
                  USERNAME: ${{ secrets.CONOHA_USERNAME }} # APIユーザー名（gncu...形式）
                  PASSWORD: ${{ secrets.CONOHA_PASSWORD }}
                  TENANT_ID: ${{ env.TENANT_ID }}
              run: |
                  set -euo pipefail
                  read -r -d '' PAYLOAD <<'JSON'
                  {
                      "auth": {
                      "identity": {
                          "methods": ["password"],
                          "password": {
                          "user": {
                              "name": "__USER__",
                              "domain": { "name": "default" },
                              "password": "__PASS__"
                          }
                          }
                      },
                      "scope": {
                          "project": { "id": "__TENANT__" }
                      }
                      }
                  }
                  JSON
                  PAYLOAD="${PAYLOAD/__USER__/${USERNAME}}"
                  PAYLOAD="${PAYLOAD/__PASS__/${PASSWORD}}"
                  PAYLOAD="${PAYLOAD/__TENANT__/${TENANT_ID}}"

                  # v3 はトークンがレスポンスヘッダ X-Subject-Token で返る
                  # -i でヘッダ出力させて、本文と分離
                  RESP_HEADERS=$(mktemp)
                  RESP_BODY=$(mktemp)
                  curl -fsS -i -H "Content-Type: application/json" -d "${PAYLOAD}" "${ID_V3}" \
                      | awk 'BEGIN{h=1} {if(h&&$0=="") h=0; if(h) print > ENVIRON["RESP_HEADERS"]; else print > ENVIRON["RESP_BODY"]}'
                  TOKEN=$(grep -i '^X-Subject-Token:' "$RESP_HEADERS" | awk '{print $2}' | tr -d '\r')

                  if [ -z "$TOKEN" ]; then
                      echo "Failed to get v3 token"; echo "--- headers ---"; cat "$RESP_HEADERS"; echo "--- body ---"; cat "$RESP_BODY"
                      exit 1
                  fi
                  echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

            - name: Graceful shutdown (os-stop)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
              run: |
                  curl -fsS -X POST \
                    -H "X-Auth-Token: ${TOKEN}" -H "Content-Type: application/json" \
                    -d '{"os-stop": null}' \
                    "${COMPUTE_BASE}/servers/${SERVER_ID}/action"

            - name: Wait until SHUTOFF (optional)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
              run: |
                  for i in $(seq 1 30); do
                    STATUS=$(curl -fsS -H "X-Auth-Token: ${TOKEN}" "${COMPUTE_BASE}/servers/${SERVER_ID}" | jq -r '.server.status')
                    echo "Current status: $STATUS"
                    [ "$STATUS" = "SHUTOFF" ] && exit 0
                    sleep 10
                  done
                  echo "Timed out waiting for SHUTOFF"; exit 1
