name: ConoHa Debug (Auth & Auto-discover Compute Base)

on:
    workflow_dispatch: {}

jobs:
    debug:
        runs-on: ubuntu-latest
        env:
            ID_V3: ${{ secrets.CONOHA_IDENTITY_ENDPOINT }}/auth/tokens # 例: https://identity.c3j1.conoha.io/v3/auth/tokens
            TENANT_ID: ${{ secrets.CONOHA_TENANT_ID }}
            SERVER_ID: ${{ secrets.CONOHA_SERVER_ID }}
        steps:
            - name: Install tools
              run: |
                  sudo apt-get update
                  sudo apt-get install -y jq

            - name: Get token & discover compute_base
              id: auth
              env:
                  USERNAME: ${{ secrets.CONOHA_USERNAME }}
                  PASSWORD: ${{ secrets.CONOHA_PASSWORD }}
                  FALLBACK_ENDPOINT: ${{ secrets.CONOHA_COMPUTE_ENDPOINT }} # 例: https://compute.c3j1.conoha.io/v2.1
              shell: bash
              run: |
                  set -euo pipefail

                  # ---------- v3 auth (try user.name, then user.id) ----------
                  build_payload() {
                    local key="$1" val="$2"
                    jq -n --arg u "$val" --arg p "$PASSWORD" --arg t "$TENANT_ID" \
                      '{
                        auth:{
                          identity:{
                            methods:["password"],
                            password:{user:{($key):$u,domain:{name:"default"},password:$p}}
                          },
                          scope:{project:{id:$t}}
                        }
                      }' --arg key "$key"
                  }
                  H=$(mktemp); B=$(mktemp)
                  P="$(build_payload name "$USERNAME")"
                  curl -sS -D "$H" -o "$B" -H "Content-Type: application/json" -d "$P" "$ID_V3"
                  TOKEN="$(awk -F': *' 'tolower($1)=="x-subject-token"{print $2}' "$H" | tr -d '\r' || true)"
                  if [ -z "${TOKEN:-}" ]; then
                    : >"$H"; : >"$B"
                    P="$(build_payload id "$USERNAME")"
                    curl -sS -D "$H" -o "$B" -H "Content-Type: application/json" -d "$P" "$ID_V3"
                    TOKEN="$(awk -F': *' 'tolower($1)=="x-subject-token"{print $2}' "$H" | tr -d '\r' || true)"
                  fi
                  if [ -z "${TOKEN:-}" ]; then
                    echo "::error::Failed to get v3 token"
                    echo "---- headers ----"; sed -n '1,160p' "$H"
                    echo "---- body ----"; head -c 800 "$B"; echo
                    exit 1
                  fi

                  # （デバッグ）プロジェクトIDを確認して、TENANT_IDと一致しているか表示
                  PROJECT_ID="$(jq -r '.token.project.id // empty' "$B")"
                  echo "Keystone project.id: ${PROJECT_ID:0:8}******** (compare with TENANT_ID: ${TENANT_ID:0:8}********)"

                  # ---------- discover compute endpoint from catalog ----------
                  CATALOG_URLS="$(jq -r '.token.catalog[] | select(.type=="compute") | .endpoints[] | select(.interface=="public") | .url' "$B" | sed 's:/*$::' || true)"
                  if [ -z "$CATALOG_URLS" ]; then
                    echo "::warning::No compute URL in catalog; will try FALLBACK_ENDPOINT"
                  fi

                  # 候補URLを作る（テナントIDあり/なし両方を試す）
                  mapfile -t CANDS < <(
                    {
                      printf '%s\n' "$CATALOG_URLS"
                      [ -n "${FALLBACK_ENDPOINT:-}" ] && printf '%s\n' "${FALLBACK_ENDPOINT%/}"
                    } | awk 'NF' | sort -u
                  )

                  declare -a TESTS=()
                  for base in "${CANDS[@]}"; do
                    # そのまま
                    TESTS+=("${base}")
                    # 末尾が /v2 または /v2.1 ならテナントIDを付与したものも
                    if [[ "$base" =~ /v2(\.1)?$ ]]; then
                      TESTS+=("${base}/${TENANT_ID}")
                    fi
                  done

                  # servers/detail を直接叩いて、200が返る最初のURLを採用
                  CHOSEN=""
                  for cb in "${TESTS[@]}"; do
                    URL="${cb%/}/servers/detail"
                    CODE="$(curl -sS -o /dev/null -w '%{http_code}' -H "X-Auth-Token: ${TOKEN}" "$URL" || echo 000)"
                    echo "Probe ${URL} -> ${CODE}"
                    if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
                      CHOSEN="${cb%/}"
                      break
                    fi
                  done

                  if [ -z "$CHOSEN" ]; then
                    echo "::error::Could not find working compute_base. Probes tried above."
                    echo "Catalog candidates:"; printf '%s\n' "${CANDS[@]}"
                    exit 1
                  fi

                  echo "Resolved compute_base: ${CHOSEN%/}"
                  echo "token=$TOKEN" >> "$GITHUB_OUTPUT"
                  echo "compute_base=${CHOSEN%/}" >> "$GITHUB_OUTPUT"

            - name: List servers in tenant (confirm SERVER_ID)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
                  COMPUTE_BASE: ${{ steps.auth.outputs.compute_base }}
                  SERVER_ID: ${{ secrets.CONOHA_SERVER_ID }}
              shell: bash
              run: |
                  set -euo pipefail
                  BASE="${COMPUTE_BASE%/}"
                  URL="${BASE}/servers/detail"
                  echo "GET ${URL}"

                  H=$(mktemp); B=$(mktemp)
                  CODE=$(curl -sS -w '%{http_code}' -D "$H" -o "$B" -H "X-Auth-Token: ${TOKEN}" "$URL")
                  echo "HTTP ${CODE}"
                  if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
                    if jq -e '.servers' "$B" >/dev/null 2>&1; then
                      CNT=$(jq '.servers | length' "$B")
                      echo "Servers in tenant: $CNT"
                      echo "Your SERVER_ID: ${SERVER_ID}"
                      echo "Match (by id):"
                      jq -r --arg id "$SERVER_ID" '.servers[] | select(.id==$id) | "\(.id)  \(.name)  \(.status)"' "$B" || true
                      echo "All servers (id name status):"
                      jq -r '.servers[] | "\(.id)  \(.name)  \(.status)"' "$B"
                    else
                      echo "---- body (first 600) ----"; head -c 600 "$B" | tr -d '\r'; echo
                      exit 1
                    fi
                  else
                    echo "---- headers ----"; sed -n '1,200p' "$H"
                    echo "---- body (first 600) ----"; head -c 600 "$B" | tr -d '\r'; echo
                    exit 1
                  fi

            - name: Get server status (single server)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
                  COMPUTE_BASE: ${{ steps.auth.outputs.compute_base }}
                  SERVER_ID: ${{ secrets.CONOHA_SERVER_ID }}
              shell: bash
              run: |
                  set -euo pipefail
                  BASE="${COMPUTE_BASE%/}"
                  URL="${BASE}/servers/${SERVER_ID}"
                  echo "GET ${URL}"
                  H=$(mktemp); B=$(mktemp)
                  CODE=$(curl -sS -w '%{http_code}' -D "$H" -o "$B" -H "X-Auth-Token: ${TOKEN}" "$URL")
                  echo "HTTP ${CODE}"
                  if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
                    jq -r '.server.status' "$B" | sed 's/^/Status: /'
                  else
                    echo "---- headers ----"; sed -n '1,200p' "$H"
                    echo "---- body (first 600) ----"; head -c 600 "$B" | tr -d '\r'; echo
                    exit 1
                  fi
