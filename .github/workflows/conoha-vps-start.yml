name: ConoHa VPS - Start (22:50 MMT)

on:
    schedule:
        - cron: "20 16 * * *" # 22:50 MMT
    workflow_dispatch: {}

jobs:
    start:
        runs-on: ubuntu-latest
        env:
            ID_ENDPOINT: ${{ secrets.CONOHA_IDENTITY_ENDPOINT }}/v2.0/tokens
            COMPUTE_BASE: ${{ secrets.CONOHA_COMPUTE_ENDPOINT }}/${{ secrets.CONOHA_TENANT_ID }}
            TENANT_ID: ${{ secrets.CONOHA_TENANT_ID }}
            SERVER_ID: ${{ secrets.CONOHA_SERVER_ID }}
        steps:
            - name: Install jq
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Get ConoHa Token (v3, fixed indent)
              id: auth
              shell: bash
              env:
                  ID_V3: ${{ secrets.CONOHA_IDENTITY_ENDPOINT }}/auth/tokens # 例: https://identity.c3j1.conoha.io/v3/auth/tokens
                  USERNAME: ${{ secrets.CONOHA_USERNAME }} # APIユーザー名（gncu...）
                  PASSWORD: ${{ secrets.CONOHA_PASSWORD }}
                  TENANT_ID: ${{ env.TENANT_ID }}
              run: |
                  set -euo pipefail

                  # 1回目: user.name で試す
                  read -r -d '' PAYLOAD <<'JSON'
                  {
                  "auth": {
                      "identity": {
                      "methods": ["password"],
                      "password": {
                          "user": {
                          "name": "__USER__",
                          "domain": { "name": "default" },
                          "password": "__PASS__"
                          }
                      }
                      },
                      "scope": { "project": { "id": "__TENANT__" } }
                  }
                  }
                  JSON
                  PAYLOAD="${PAYLOAD/__USER__/${USERNAME}}"
                  PAYLOAD="${PAYLOAD/__PASS__/${PASSWORD}}"
                  PAYLOAD="${PAYLOAD/__TENANT__/${TENANT_ID}}"

                  RESP_HEADERS="$(mktemp)"
                  RESP_BODY="$(mktemp)"
                  # -Dでヘッダをファイルへ、-oで本文をファイルへ（パイプを使わないのでインデント事故なし）
                  curl -sS -D "$RESP_HEADERS" -o "$RESP_BODY" \
                  -H "Content-Type: application/json" \
                  -d "$PAYLOAD" \
                  "$ID_V3"

                  TOKEN="$(awk -F': *' 'tolower($1)=="x-subject-token"{print $2}' "$RESP_HEADERS" | tr -d '\r')"

                  # 失敗時: user.id でリトライ（環境によっては name では通らない）
                  if [ -z "$TOKEN" ]; then
                  read -r -d '' PAYLOAD2 <<'JSON'
                  {
                      "auth": {
                      "identity": {
                          "methods": ["password"],
                          "password": {
                          "user": {
                              "id": "__USER_ID__",
                              "domain": { "name": "default" },
                              "password": "__PASS__"
                          }
                          }
                      },
                      "scope": { "project": { "id": "__TENANT__" } }
                      }
                  }
                  JSON
                  PAYLOAD2="${PAYLOAD2/__USER_ID__/${USERNAME}}"
                  PAYLOAD2="${PAYLOAD2/__PASS__/${PASSWORD}}"
                  PAYLOAD2="${PAYLOAD2/__TENANT__/${TENANT_ID}}"

                  : >"$RESP_HEADERS"; : >"$RESP_BODY"
                  curl -sS -D "$RESP_HEADERS" -o "$RESP_BODY" \
                      -H "Content-Type: application/json" \
                      -d "$PAYLOAD2" \
                      "$ID_V3"

                  TOKEN="$(awk -F': *' 'tolower($1)=="x-subject-token"{print $2}' "$RESP_HEADERS" | tr -d '\r')"
                  fi

                  if [ -z "$TOKEN" ]; then
                  echo "Failed to get v3 token"
                  echo "---- Request URL: $ID_V3"
                  echo "---- Response Headers ----"; cat "$RESP_HEADERS"
                  echo "---- Response Body ----"; cat "$RESP_BODY"
                  exit 1
                  fi

                  echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

            - name: Power ON (os-start)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
              run: |
                  curl -fsS -X POST \
                    -H "X-Auth-Token: ${TOKEN}" -H "Content-Type: application/json" \
                    -d '{"os-start": null}' \
                    "${COMPUTE_BASE}/servers/${SERVER_ID}/action"

            - name: Wait until ACTIVE (optional)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
              run: |
                  for i in $(seq 1 30); do
                    STATUS=$(curl -fsS -H "X-Auth-Token: ${TOKEN}" "${COMPUTE_BASE}/servers/${SERVER_ID}" | jq -r '.server.status')
                    echo "Current status: $STATUS"
                    [ "$STATUS" = "ACTIVE" ] && exit 0
                    sleep 10
                  done
                  echo "Timed out waiting for ACTIVE"; exit 1

            - name: Show fixed IP (for your check)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
              run: |
                  curl -fsS -H "X-Auth-Token: ${TOKEN}" "${COMPUTE_BASE}/servers/${SERVER_ID}" \
                    | jq -r '.server.addresses | to_entries[] | "\(.key): " + ( .value | map(.addr) | join(", ") )'
