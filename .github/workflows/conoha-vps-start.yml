name: ConoHa VPS - Start (22:30 MMT)

on:
    schedule:
        - cron: "0 16 * * *" # 22:30 MMT
    workflow_dispatch: {}

jobs:
    start:
        runs-on: ubuntu-latest
        env:
            ID_ENDPOINT: ${{ secrets.CONOHA_IDENTITY_ENDPOINT }}/v2.0/tokens
            COMPUTE_BASE: ${{ secrets.CONOHA_COMPUTE_ENDPOINT }}/${{ secrets.CONOHA_TENANT_ID }}
            TENANT_ID: ${{ secrets.CONOHA_TENANT_ID }}
            SERVER_ID: ${{ secrets.CONOHA_SERVER_ID }}
        steps:
            - name: Install jq
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Get ConoHa Token
              id: auth
              run: |
                  PAYLOAD=$(cat <<'JSON'
                  {
                    "auth": {
                      "passwordCredentials": {
                        "username": "__USER__",
                        "password": "__PASS__"
                      },
                      "tenantId": "__TENANT__"
                    }
                  }
                  JSON
                  )
                  PAYLOAD="${PAYLOAD/__USER__/${{ secrets.CONOHA_USERNAME }}}"
                  PAYLOAD="${PAYLOAD/__PASS__/${{ secrets.CONOHA_PASSWORD }}}"
                  PAYLOAD="${PAYLOAD/__TENANT__/${TENANT_ID}}"

                  TOKEN=$(curl -fsS -H "Content-Type: application/json" -d "${PAYLOAD}" "${ID_ENDPOINT}" | jq -r '.access.token.id')
                  if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
                    echo "Failed to get token"; exit 1
                  fi
                  echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

            - name: Power ON (os-start)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
              run: |
                  curl -fsS -X POST \
                    -H "X-Auth-Token: ${TOKEN}" -H "Content-Type: application/json" \
                    -d '{"os-start": null}' \
                    "${COMPUTE_BASE}/servers/${SERVER_ID}/action"

            - name: Wait until ACTIVE (optional)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
              run: |
                  for i in $(seq 1 30); do
                    STATUS=$(curl -fsS -H "X-Auth-Token: ${TOKEN}" "${COMPUTE_BASE}/servers/${SERVER_ID}" | jq -r '.server.status')
                    echo "Current status: $STATUS"
                    [ "$STATUS" = "ACTIVE" ] && exit 0
                    sleep 10
                  done
                  echo "Timed out waiting for ACTIVE"; exit 1

            - name: Show fixed IP (for your check)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
              run: |
                  curl -fsS -H "X-Auth-Token: ${TOKEN}" "${COMPUTE_BASE}/servers/${SERVER_ID}" \
                    | jq -r '.server.addresses | to_entries[] | "\(.key): " + ( .value | map(.addr) | join(", ") )'
