name: ConoHa VPS - Start (22:50 MMT)

on:
    schedule:
        - cron: "20 16 * * *" # 22:50 MMT (UTC+6:30)
    workflow_dispatch: {}

jobs:
    start:
        runs-on: ubuntu-latest
        concurrency:
            group: conoha-vps-power
            cancel-in-progress: false

        steps:
            - name: Install tools
              run: |
                  sudo apt-get update
                  sudo apt-get install -y jq

            - name: Get token & discover compute_base (Keystone v3)
              id: auth
              shell: bash
              env:
                  ID_V3: ${{ secrets.CONOHA_IDENTITY_ENDPOINT }}/auth/tokens
                  USERNAME: ${{ secrets.CONOHA_USERNAME }}
                  PASSWORD: ${{ secrets.CONOHA_PASSWORD }}
                  TENANT_ID: ${{ secrets.CONOHA_TENANT_ID }}
                  FALLBACK_ENDPOINT: ${{ secrets.CONOHA_COMPUTE_ENDPOINT }} # e.g. https://compute.c3j1.conoha.io/v2.1
              run: |
                  set -euo pipefail

                  build_payload() {
                    local key="$1" val="$2"
                    jq -n --arg u "$val" --arg p "$PASSWORD" --arg t "$TENANT_ID" \
                      '{
                        auth:{
                          identity:{
                            methods:["password"],
                            password:{user:{($key):$u,domain:{name:"default"},password:$p}}
                          },
                          scope:{project:{id:$t}}
                        }
                      }' --arg key "$key"
                  }

                  # Try user.name then user.id
                  H=$(mktemp); B=$(mktemp)
                  P="$(build_payload name "$USERNAME")"
                  curl -sS -D "$H" -o "$B" -H "Content-Type: application/json" -d "$P" "$ID_V3"
                  TOKEN="$(awk -F': *' 'tolower($1)=="x-subject-token"{print $2}' "$H" | tr -d '\r' || true)"
                  if [ -z "${TOKEN:-}" ]; then
                    : >"$H"; : >"$B"
                    P="$(build_payload id "$USERNAME")"
                    curl -sS -D "$H" -o "$B" -H "Content-Type: application/json" -d "$P" "$ID_V3"
                    TOKEN="$(awk -F': *' 'tolower($1)=="x-subject-token"{print $2}' "$H" | tr -d '\r' || true)"
                  fi
                  test -n "${TOKEN:-}" || { echo "::error::Failed to get v3 token"; exit 1; }

                  # Discover compute endpoint from service catalog
                  CATALOG_URLS="$(jq -r '.token.catalog[] | select(.type=="compute") | .endpoints[] | select(.interface=="public") | .url' "$B" | sed 's:/*$::' || true)"
                  mapfile -t CANDS < <(
                    {
                      printf '%s\n' "$CATALOG_URLS"
                      [ -n "${FALLBACK_ENDPOINT:-}" ] && printf '%s\n' "${FALLBACK_ENDPOINT%/}"
                    } | awk 'NF' | sort -u
                  )

                  declare -a TESTS=()
                  for base in "${CANDS[@]}"; do
                    TESTS+=("${base}")
                    if [[ "$base" =~ /v2(\.1)?$ ]]; then
                      TESTS+=("${base}/${TENANT_ID}")
                    fi
                  done

                  CHOSEN=""
                  for cb in "${TESTS[@]}"; do
                    URL="${cb%/}/servers/detail"
                    CODE="$(curl -sS -o /dev/null -w '%{http_code}' -H "X-Auth-Token: ${TOKEN}" "$URL" || echo 000)"
                    if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
                      CHOSEN="${cb%/}"
                      break
                    fi
                  done
                  test -n "$CHOSEN" || { echo "::error::No working compute endpoint found"; exit 1; }

                  echo "token=$TOKEN" >> "$GITHUB_OUTPUT"
                  echo "compute_base=$CHOSEN" >> "$GITHUB_OUTPUT"

            - name: Power ON (os-start)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
                  COMPUTE_BASE: ${{ steps.auth.outputs.compute_base }}
                  SERVER_ID: ${{ secrets.CONOHA_SERVER_ID }}
              run: |
                  set -euo pipefail
                  curl -sS -X POST \
                    -H "X-Auth-Token: ${TOKEN}" -H "Content-Type: application/json" \
                    -d '{"os-start": null}' \
                    "${COMPUTE_BASE%/}/servers/${SERVER_ID}/action"

            - name: Wait until ACTIVE (max ~5 min)
              env:
                  TOKEN: ${{ steps.auth.outputs.token }}
                  COMPUTE_BASE: ${{ steps.auth.outputs.compute_base }}
                  SERVER_ID: ${{ secrets.CONOHA_SERVER_ID }}
              run: |
                  set -euo pipefail
                  for i in $(seq 1 60); do
                    STATUS=$(curl -sS -H "X-Auth-Token: ${TOKEN}" "${COMPUTE_BASE%/}/servers/${SERVER_ID}" | jq -r '.server.status // empty')
                    echo "Current status: ${STATUS:-unknown}"
                    [ "$STATUS" = "ACTIVE" ] && exit 0
                    sleep 5
                  done
                  echo "Timed out waiting for ACTIVE"; exit 1
